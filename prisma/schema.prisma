
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String   // Em um app real, isso seria um hash
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLogs AuditLog[] // Relação com AuditLog
}

model Product {
  id        String   @id @default(uuid())
  name      String
  price     Float
  cost      Float
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  saleItems SaleItem[] // Relação com SaleItem
}

model Sale {
  id          String     @id @default(uuid())
  totalAmount Float
  totalProfit Float
  saleDate    DateTime   @default(now())
  cashierId   String? // Pode ser uma FK para User no futuro
  items       SaleItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model SaleItem {
  id           String  @id @default(uuid())
  saleId       String
  sale         Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId    String
  product      Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  productName  String // Denormalized
  quantity     Int
  priceAtSale  Float
  costAtSale   Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([saleId])
  @@index([productId])
}

model AuditLog {
  id        String    @id @default(uuid())
  action    String    // Ex: "CREATE_PRODUCT", "LOGIN_SUCCESS"
  userId    String?   // ID do usuário que realizou a ação
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  details   Json?     // Detalhes adicionais da ação em formato JSON
  ipAddress String?
  createdAt DateTime  @default(now())

  @@index([userId])
  @@index([action])
}
