
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String?
  password  String // Password hash
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  sales     Sale[]     @relation("CashierSales")
  auditLogs AuditLog[] @relation("UserAuditLogs")
}

model Product {
  id        String     @id @default(uuid())
  name      String
  price     Float // Stored in USD
  cost      Float // Stored in USD
  quantity  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  saleItems SaleItem[]
}

model Sale {
  id          String     @id @default(uuid())
  items       SaleItem[]
  totalAmount Float // Stored in USD
  totalProfit Float // Stored in USD
  saleDate    DateTime   @default(now())
  cashierId   String?
  cashier     User?      @relation("CashierSales", fields: [cashierId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model SaleItem {
  id           String  @id @default(uuid())
  saleId       String
  sale         Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId    String
  product      Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  productName  String // Denormalized for convenience
  quantity     Int
  priceAtSale  Float // Stored in USD (price per unit at the time of sale)
  costAtSale   Float // Stored in USD (cost per unit at the time of sale)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String
  userId    String?
  user      User?    @relation("UserAuditLogs", fields: [userId], references: [id])
  details   String?  // Encrypted JSON string
  ipAddress String?
  createdAt DateTime @default(now())
}
